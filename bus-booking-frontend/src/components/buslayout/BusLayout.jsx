import React, { useState, useEffect } from "react";
import { MdOutlineChair } from "react-icons/md";
import { GiSteeringWheel } from "react-icons/gi";
import { RiMoneyDollarCircleLine } from "react-icons/ri";

import { toast, ToastContainer } from "react-toastify";
import { useParams } from "react-router-dom";
import { axiosInst } from "../../service/axiosInstance";
import useRazorpay from "react-razorpay";
import Modal from "react-responsive-modal";
import ConfirmationBox from "../ConfirmationBox/ConfirmationBox";

import jsPDF from "jspdf";
import QRCode from "qrcode";
import "react-toastify/dist/ReactToastify.css";
import "react-responsive-modal/styles.css";
import "jspdf-autotable";

import Bus from "../../assets/images/bus9.png"; // Пример пути к картинке автобуса

// Вспомогательные функции форматирования
function formatDateTime(dateTimeString) {
  const date = new Date(dateTimeString);
  const day = date.getDate().toString().padStart(2, "0");
  const month = (date.getMonth() + 1).toString().padStart(2, "0");
  const hours = date.getHours().toString().padStart(2, "0");
  const minutes = date.getMinutes().toString().padStart(2, "0");
  return `${day}/${month} ${hours}:${minutes}`;
}

function formatDate(dateString) {
  const dateObj = new Date(dateString);
  const year = dateObj.getFullYear();
  const month = String(dateObj.getMonth() + 1).padStart(2, "0");
  const day = String(dateObj.getDate()).padStart(2, "0");
  return `${year}-${month}-${day}`;
}

export default function BusLayout() {
  const [Razorpay] = useRazorpay();
  const { id } = useParams();

  // Общее состояние
  const [seats, setSeats] = useState([]); // Список занятых мест (с сервера)
  const [travelInfo, setTravelInfo] = useState({});
  const [selectedSeats, setSelectedSeats] = useState([]); // Какие места юзер выбрал
  const [passengerDetails, setPassengerDetails] = useState([]);
  const [isPassengerDetailsFilled, setIsPassengerDetailsFilled] = useState(false);

  // Прочие состояния
  const [bookingSuccess, setBookingSuccess] = useState(false);
  const [verificationResult, setVerificationResult] = useState("");
  const [showConfirmation, setShowConfirmation] = useState(false);
  const [status, setStatus] = useState(false); // Флаг, чтобы заново подгружать места
  const [confirmObject, setConfirmObject] = useState({
    busNo: "",
    noOfTickets: 0,
    cost: 0,
    from: "",
    to: "",
  });

  // Для простоты
  let totalSeats = 41; // Ваш расклад на 41 место
  let array = [];
  let payload = {};
  let ticketId;

  // ======= ФУНКЦИЯ СКАЧИВАНИЯ PDF =======
  const downloadTicket = async (ticketid) => {
    try {
      const response = await axiosInst.get(`/bookings/getbooking/${ticketid}`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem("jwtToken")}`,
        },
      });
      const ticketDetails = response.data;

      const doc = new jsPDF();
      // Пример: берём шрифт из ENV или как-то иначе
      const amiriFont = import.meta.env.VITE_AMIRI_FONT;
      doc.addFileToVFS("Amiri-Regular.ttf", amiriFont);
      doc.addFont("Amiri-Regular.ttf", "Amiri", "normal");
      doc.setFont("Amiri");

      doc.setFillColor("#ffffff");
      doc.rect(0, 0, doc.internal.pageSize.width, doc.internal.pageSize.height, "F");
      doc.setFontSize(8);
      doc.text("This PDF is generated by Dimash Bus System 2024", 10, 10);

      // Картинка, заголовок, рамка, QR и т.д.
      // ... (убрано для краткости, копируйте из вашего кода)
      // ...
      // Сохраняем
      doc.save(`Dimash_Bus_${ticketid}_.pdf`);
    } catch (error) {
      console.error("Error downloading ticket:", error);
      toast.error("Something Went Wrong!, Please try again");
    }
  };

  // ======= ОБНОВЛЯЕМ CONFIRM OBJECT =======
  useEffect(() => {
    if (travelInfo && selectedSeats.length > 0) {
      setConfirmObject({
        busNo: travelInfo.busNo,
        noOfTickets: selectedSeats.length,
        cost: travelInfo.fare * selectedSeats.length,
        from: travelInfo.from,
        to: travelInfo.to,
      });
    }
  }, [travelInfo, selectedSeats]);

  // =========== LOCK SEATS ===========
  const bookSeatConcurrency = async () => {
    try {
      await axiosInst.post(
        `/seat/lock`,
        {
          userId: localStorage.getItem("id"),
          busId: id,
          seatNos: selectedSeats,
        },
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("jwtToken")}`,
          },
        }
      );
    } catch (error) {
      console.log(error);
    }
  };

  // =========== CHECK SEATS ===========
  const confirmCheck = async () => {
    try {
      const res = await axiosInst.get(`/seat/${id}`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem("jwtToken")}`,
        },
      });
      return selectedSeats.some((seat) => res.data.includes(seat));
    } catch (error) {
      console.log(error);
    }
  };

  // ========== UNLOCK SEATS ==========
  const delSecondDb = async () => {
    try {
      await axiosInst.post("/seat/unlock", {
        busId: id,
        seatNos: selectedSeats,
      });
    } catch (error) {
      console.log(error);
    }
  };

  // ========== LOAD RAZORPAY SCRIPT ==========
  const loadScript = (src) => {
    return new Promise((resolve) => {
      const script = document.createElement("script");
      script.src = src;
      script.onload = () => resolve(true);
      script.onerror = () => resolve(false);
      document.body.appendChild(script);
    });
  };

  // ========== HANDLE CONFIRM PAYMENT ==========
  const handleConfirm = async () => {
    // Проверяем повторно
    if (await confirmCheck()) {
      toast.error("Seats Currently Unavailable... Please Try Again!");
      setStatus(true);
      return;
    }

    // Лочим
    bookSeatConcurrency();

    const scriptLoaded = await loadScript("https://checkout.razorpay.com/v1/checkout.js");
    if (!scriptLoaded) {
      console.log("Failed to load Razorpay script.");
      return;
    }

    try {
      const response = await axiosInst.post("/payment/razorpay", {
        amount: travelInfo.fare * passengerDetails.length,
      });
      const data = response.data;

      const options = {
        key: "rzp_test_bTDnw950m7Mzb4",
        currency: data.currency,
        amount: data.amount,
        name: "Dimash Bus",
        description: "Dimash Bus Booking",
        order_id: data.id,
        theme: { color: "#3bb19b" },
        modal: {
          ondismiss: () => {
            delSecondDb();
            clearTimeout(timeoutID);
            console.log("Checkout form closed");
          },
        },
        handler: async function (response) {
          payload = {
            paymentId: response.razorpay_payment_id,
            razorpayOrderId: response.razorpay_order_id,
            razorpaySignature: response.razorpay_signature,
            busId: id,
            userId: localStorage.getItem("id"),
            fare: travelInfo.fare * passengerDetails.length,
            seatPassengerList: passengerDetails.map((psg) => ({
              seatNo: psg.seatNumber,
              passenger: {
                firstName: psg.firstName,
                lastName: psg.lastName,
                gender: psg.gender,
                age: psg.age,
              },
            })),
          };

          try {
            const response1 = await axiosInst.post("/payment/verify-payment", payload);
            const data1 = response1.data;
            if (data1.success) {
              setVerificationResult("Payment is successful");
              toast.success("Payment Success");
              setBookingSuccess(true);
              ticketId = data1.id;
              await downloadTicket(ticketId);
              window.location = "/";
            } else {
              setVerificationResult("Payment is not successful");
              toast.error("Payment Failed");
            }
          } catch (error) {
            console.error("Payment Verification Error:", error);
            setVerificationResult("Payment verification failed");
          }
        },
      };

      var rzp1 = new Razorpay(options);
      rzp1.open();

      const timeoutID = setTimeout(() => {
        delSecondDb();
        window.location.reload();
      }, 2 * 60 * 1000);
    } catch (error) {
      console.log("Failed to load Razorpay script.", error);
    }
  };

  // ========== CLICK ON SEAT ==========
  const handleSeatClick = (seatNumber) => {
    if (selectedSeats.includes(seatNumber)) {
      // Убираем из выбранных
      setSelectedSeats((prev) => prev.filter((seat) => seat !== seatNumber));
      setPassengerDetails((prev) => prev.filter((p) => p.seatNumber !== seatNumber));
    } else {
      // Проверяем, занято ли оно
      if (!seats.includes(seatNumber)) {
        // Добавляем
        // (Лимит 10 мест из вашего кода)
        if (selectedSeats.length < 10) {
          setSelectedSeats((prev) => [...prev, seatNumber]);
          setPassengerDetails((prev) => [
            ...prev,
            { seatNumber, firstName: "", lastName: "", age: "", gender: "" },
          ]);
        } else {
          alert("You can only select a maximum of 10 seats.");
        }
      } else {
        toast.error("Seat already booked");
      }
    }
  };

  // ========== INPUT CHANGES ==========
  const handleInputChange = (event, seatNumber, fieldName) => {
    const { value } = event.target;
    setPassengerDetails((prevDetails) =>
      prevDetails.map((p) =>
        p.seatNumber === seatNumber ? { ...p, [fieldName]: value } : p
      )
    );
  };

  // ========== SUBMIT FORM ==========
  const handleSubmit = (e) => {
    e.preventDefault();
    if (!isPassengerDetailsFilled) {
      toast.error("Жолаушы мәліметтерін енгізіңіз");
    } else {
      setShowConfirmation(true);
      console.log(confirmObject);
    }
  };

  // Формат даты
  const convertToValidDateTimeFormat = (dateTimeString) => {
    const date = new Date(dateTimeString);
    const day = date.getDate().toString().padStart(2, "0");
    const month = (date.getMonth() + 1).toString().padStart(2, "0");
    const year = date.getFullYear();
    const hours = date.getHours().toString().padStart(2, "0");
    const minutes = date.getMinutes().toString().padStart(2, "0");
    return `${day}/${month}/${year} ${hours}:${minutes}`;
  };

  // Подсчет времени
  const calculateTotalTime = (startTime, endTime) => {
    try {
      if (!startTime || !endTime) return "Invalid input";

      const start = new Date(startTime);
      const end = new Date(endTime);
      let diff = end - start;
      if (diff < 0) diff += 24 * 60 * 60 * 1000;

      const hours = Math.floor(diff / (1000 * 60 * 60));
      const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
      return `${hours} сағ. ${minutes} мин.`;
    } catch (error) {
      console.error("Error calculating total time:", error);
      return "Invalid input";
    }
  };

  // ========== РЕНДЕР САМОГО МЕСТА ==========
  const SeatIcon = ({ seatNumber }) => {
    // booked?
    const isBooked = seats.includes(seatNumber);
    // selected?
    const isSelected = selectedSeats.includes(seatNumber);

    let seatColorClass = "text-neutral-600"; // Available
    if (isBooked) {
      seatColorClass = "text-red-500"; // Booked
    } else if (isSelected) {
      seatColorClass = "text-violet-600"; // Selected
    }

    return (
      <MdOutlineChair
        className={`text-3xl -rotate-90 cursor-pointer ${seatColorClass}`}
        onClick={() => handleSeatClick(seatNumber)}
      />
    );
  };

  // ========== РЕНДЕР ВСЕХ 41 МЕСТ ==========
  const renderSeats = () => {
    let seatsArray = [];
    for (let i = 1; i <= totalSeats; i++) {
      seatsArray.push(
        <SeatIcon key={i} seatNumber={i} />
      );
    }
    return seatsArray;
  };

  // ЗАПРОСЫ
  const fetchBusById = async () => {
    try {
      const res = await axiosInst.get(`/seats/bus/${id}`, {
        headers: { Authorization: `Bearer ${localStorage.getItem("jwtToken")}` },
      });
      setTravelInfo(res.data);
      totalSeats = res.data.totalSeats || 41;
      array = [...array, ...res.data.bookedSeats];
      setSeats(array);
    } catch (error) {
      console.log(error);
    }
  };

  const getSeatsSecondDb = async () => {
    try {
      const res = await axiosInst.get(`/seat/${id}`, {
        headers: { Authorization: `Bearer ${localStorage.getItem("jwtToken")}` },
      });
      array = [...array, ...res.data];
      setSeats(array);
    } catch (error) {
      console.log(error);
    }
  };

  // Запускаем эффекты
  useEffect(() => {
    // Проверяем, все ли поля пассажиров заполнены
    setIsPassengerDetailsFilled(
      passengerDetails.every((p) => p.firstName && p.lastName && p.age && p.gender) &&
        passengerDetails.length > 0
    );
  }, [passengerDetails]);

  useEffect(() => {
    // При загрузке компонента / при изменении status
    array = [];
    getSeatsSecondDb();
    fetchBusById();
  }, [status]);

  // ====================== РЕНДЕР =======================
  return (
    <div className="w-full lg:px-28 md:px-16 sm:px-7 px-4 mt-[13ch] mb-[10ch] space-y-12">
      <ToastContainer />
      <div className="w-full grid grid-cols-2 gap-10 items-start">
        {/* Левая часть (инфа + форма) */}
        <div className="col-span-1 space-y-8">
          <img
            src={Bus}
            alt="bus"
            className="w-full aspect-[3/2] rounded-md object-contain"
          />

          <div className="border rounded-md p-4 bg-neutral-100 dark:bg-neutral-900/60">
            <h2 className="text-xl font-semibold mb-2">Саяхат туралы ақпарат</h2>
            <p className="text-base text-neutral-800 dark:text-neutral-300">
              <span className="font-medium">Автобус нөмірі:</span> {travelInfo.busNo}
            </p>
            <p className="flex items-center justify-between mt-2">
              <span>
                <span className="font-medium">Қайдан:</span> {travelInfo.from}
              </span>
              <span>
                <span className="font-medium">Қайда:</span> {travelInfo.to}
              </span>
            </p>
            <p className="flex items-center justify-between mt-2">
              <span>
                <span className="font-medium">Шығу уақыты:</span>{" "}
                {convertToValidDateTimeFormat(travelInfo.startTime)}
              </span>
              <span>
                <span className="font-medium">Аяқталу уақыты:</span>{" "}
                {convertToValidDateTimeFormat(travelInfo.endTime)}
              </span>
            </p>
            <p className="mt-2">
              <span className="font-medium">Жалпы уақыт:</span>{" "}
              {calculateTotalTime(travelInfo.startTime, travelInfo.endTime)}
            </p>
          </div>

          <div className="border rounded-md p-4 bg-neutral-100 dark:bg-neutral-900/60">
            <h2 className="text-xl font-semibold mb-3">Жолаушы мәліметтері</h2>
            <form onSubmit={handleSubmit} className="space-y-4">
              {passengerDetails.map((passenger) => (
                <div
                  key={passenger.seatNumber}
                  className="border-b border-neutral-300 pb-3 mb-3"
                >
                  <p className="font-medium mb-2">
                    Орын {passenger.seatNumber}
                  </p>
                  <div className="flex gap-3 mb-2">
                    <input
                      type="text"
                      value={passenger.firstName || ""}
                      onChange={(event) =>
                        handleInputChange(event, passenger.seatNumber, "firstName")
                      }
                      placeholder="First Name"
                      className="flex-1 px-3 py-2 rounded-md border border-neutral-300 focus:outline-none"
                    />
                    <input
                      type="text"
                      value={passenger.lastName || ""}
                      onChange={(event) =>
                        handleInputChange(event, passenger.seatNumber, "lastName")
                      }
                      placeholder="Last Name"
                      className="flex-1 px-3 py-2 rounded-md border border-neutral-300 focus:outline-none"
                    />
                  </div>
                  <div className="flex gap-3">
                    <input
                      type="number"
                      value={passenger.age || ""}
                      onChange={(event) =>
                        handleInputChange(event, passenger.seatNumber, "age")
                      }
                      placeholder="Age"
                      min="0"
                      className="flex-1 px-3 py-2 rounded-md border border-neutral-300 focus:outline-none"
                    />
                    <select
                      value={passenger.gender || ""}
                      onChange={(event) =>
                        handleInputChange(event, passenger.seatNumber, "gender")
                      }
                      className="flex-1 px-3 py-2 rounded-md border border-neutral-300 focus:outline-none"
                    >
                      <option value="">Жыныс</option>
                      <option value="Male">Еркек</option>
                      <option value="Female">Әйел</option>
                      <option value="Other">Өзге</option>
                    </select>
                  </div>
                </div>
              ))}

              <button
                type="submit"
                disabled={selectedSeats.length === 0}
                className={`w-full h-12 rounded-md text-white font-medium 
                  ${
                    selectedSeats.length === 0
                      ? "bg-gray-400 cursor-not-allowed"
                      : "bg-violet-600 hover:bg-violet-700"
                  }`}
              >
                Билетті брондау
              </button>
            </form>

            {bookingSuccess && (
              <div className="bg-green-500 text-white p-3 rounded-md mt-4 text-center">
                Брондау сәтті аяқталды!
              </div>
            )}
          </div>
        </div>

        {/* Правая часть (выбор мест) */}
        <div className="col-span-1 space-y-8">
          <div className="border rounded-md p-4 bg-neutral-100 dark:bg-neutral-900/60">
            <h2 className="text-xl font-semibold mb-3">Орындарыңызды таңдаңыз</h2>

            {/* =========== СЕТКА С МЕСТАМИ =========== */}
            <div className="w-full flex justify-between">
              <div className="flex-1 w-full flex">
                <div className="w-full flex-1 flex gap-x-5 items-stretch">
                  {/* Левая часть (руль + несколько рядов) */}
                  <div className="w-10 h-full border-r-2 border-dashed border-neutral-300 dark:border-neutral-800">
                    <GiSteeringWheel className="text-3xl text-violet-600 -rotate-90" />
                  </div>

                  <div className="flex flex-col items-center">
                    <div className="flex-1 space-y-4">
                      {/* рендер seats 0..9 */}
                      <div className="w-full grid grid-cols-10 gap-x-3">
                        {renderSeats().slice(0, 10)}
                      </div>
                      {/* рендер seats 10..19 */}
                      <div className="w-full grid grid-cols-10 gap-x-3">
                        {renderSeats().slice(10, 20)}
                      </div>
                      {/* seat #20 (отдельно) */}
                      <div className="w-full grid grid-cols-10 gap-x-3">
                        <div className="col-span-9"></div>
                        {renderSeats().slice(20, 21)}
                      </div>
                      {/* seats 21..30 */}
                      <div className="w-full grid grid-cols-10 gap-x-3">
                        {renderSeats().slice(21, 31)}
                      </div>
                      {/* seats 31..40 (ну а у нас 41, так что 31..41) */}
                      <div className="w-full grid grid-cols-10 gap-x-3">
                        {renderSeats().slice(31, 41)}
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Правый столбец: легенда */}
              <div className="space-y-3 w-28 ml-3">
                {/* Available */}
                <div className="flex items-center gap-x-2">
                  <MdOutlineChair className="text-lg text-neutral-500 -rotate-90" />
                  <p className="text-neutral-900 dark:text-neutral-200 text-sm font-normal">
                    Available
                  </p>
                </div>
                {/* Booked */}
                <div className="flex items-center gap-x-2">
                  <MdOutlineChair className="text-lg text-red-500 -rotate-90" />
                  <p className="text-neutral-900 dark:text-neutral-200 text-sm font-normal">
                    Booked
                  </p>
                </div>
                {/* Selected */}
                <div className="flex items-center gap-x-2">
                  <MdOutlineChair className="text-lg text-violet-500 -rotate-90" />
                  <p className="text-neutral-900 dark:text-neutral-200 text-sm font-normal">
                    Selected
                  </p>
                </div>
                {/* Price Info */}
                <div className="flex items-center gap-x-2">
                  <RiMoneyDollarCircleLine className="text-lg text-neutral-500" />
                  <p className="text-neutral-900 dark:text-neutral-200 text-sm font-normal">
                    500 KZT
                  </p>
                </div>
              </div>
            </div>

            {/* Список выбранных мест */}
            {selectedSeats.length > 0 && (
              <div className="mt-8">
                <h3 className="text-lg font-bold">Selected Seats:</h3>
                <div className="flex flex-wrap mt-2">
                  {selectedSeats.map((seat) => (
                    <div
                      key={seat}
                      className="w-10 h-10 rounded-md m-1.5 text-lg font-medium bg-violet-600/30 flex items-center justify-center"
                    >
                      {seat}
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Итоговая цена */}
            {selectedSeats.length > 0 && (
              <div className="mt-5 flex items-center gap-x-4">
                <h3 className="text-lg font-bold">Толық баға:</h3>
                <p className="text-lg font-medium">
                  {selectedSeats.length * 250} KZT
                </p>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Модальное окно подтверждения */}
      <Modal open={showConfirmation} onClose={() => setShowConfirmation(false)} center>
        <ConfirmationBox
          onClose={() => setShowConfirmation(false)}
          handleConfirm={handleConfirm}
          confirmObject={confirmObject}
        />
      </Modal>
    </div>
  );
}
